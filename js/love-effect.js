// ========== C·∫§U H√åNH ==========
const SLIDE_DURATION = 5000;
const IMAGE_JSON = "data/images.json";
const MESSAGE_JSON = "data/message.json";

// ========== X·ª¨ L√ù ·∫¢NH N·ªÄN ==========
let currentImageIndex = 0;
let imageElements = [];

function loadImages() {
    fetch(IMAGE_JSON)
        .then(response => response.json())
        .then(imageLinks => {
            imageElements = imageLinks;
            const leftBg = document.getElementById("background-left");
            const rightBg = document.getElementById("background-right");
            
            leftBg.style.backgroundImage = `url('${imageElements[0]}')`;
            rightBg.style.backgroundImage = `url('${imageElements[1]}')`;
            
            leftBg.classList.add("active");
            rightBg.classList.add("active");

            setInterval(changeBackground, SLIDE_DURATION);
        })
        .catch(error => console.error("L·ªói t·∫£i ·∫£nh:", error));
}

function changeBackground() {
    if (imageElements.length < 2) return;

    const leftElement = document.getElementById("background-left");
    const rightElement = document.getElementById("background-right");

    const nextLeftIndex = (currentImageIndex + 2) % imageElements.length;
    const nextRightIndex = (currentImageIndex + 3) % imageElements.length;

    leftElement.classList.remove("active");
    rightElement.classList.remove("active");

    setTimeout(() => {
        leftElement.style.backgroundImage = `url('${imageElements[nextLeftIndex]}')`;
        rightElement.style.backgroundImage = `url('${imageElements[nextRightIndex]}')`;

        leftElement.classList.add("active");
        rightElement.classList.add("active");
    }, 500);

    currentImageIndex = nextLeftIndex;
}

// ========== HI·ªÇN TH·ªä TIN NH·∫ÆN ==========
function createMessage() {
    fetch(MESSAGE_JSON)
        .then(response => response.json())
        .then(data => {
            const messageContainer = document.getElementById("message");
            messageContainer.innerHTML = `<h2 class="recipient">üíå G·ª≠i: ${data.recipient || "Ng∆∞·ªùi ƒê·∫∑c Bi·ªát"}</h2>`;
            
            let animationDelay = 0; // Th·ªùi gian delay t·ªïng
            const lineDelay = 0.5;  // Delay gi·ªØa c√°c d√≤ng (gi√¢y)

            // L·∫∑p qua t·ª´ng d√≤ng tin nh·∫Øn
            data.message.forEach((textLine) => {
                const p = document.createElement("p");
                p.className = "typing-effect";
                p.textContent = textLine; // N·ªôi dung d√≤ng text

                // T√≠nh th·ªùi gian animation typing cho t·ª´ng d√≤ng
                const charCount = textLine.length;
                const duration = charCount * 0.12; // M·ªói k√Ω t·ª± 0.12s

                // G·∫Øn CSS animation
                p.style.animation = `
                    typing ${duration}s steps(${charCount}, end) ${animationDelay}s forwards,
                    blink-caret 0.75s step-end infinite ${animationDelay}s
                `;

                // Th√™m d√≤ng text v√†o container
                messageContainer.appendChild(p);

                // X√≥a con tr·ªè nh·∫•p nh√°y sau khi animation ho√†n t·∫•t
                p.addEventListener("animationend", () => {
                    p.style.borderRight = "none"; // T·∫Øt con tr·ªè
                });

                // C·∫≠p nh·∫≠t th·ªùi gian delay cho d√≤ng ti·∫øp theo
                animationDelay += duration + lineDelay;
            });
        })
        .catch((error) => {
            console.error("L·ªói t·∫£i tin nh·∫Øn:", error);

            // Hi·ªÉn th·ªã fallback khi l·ªói t·∫£i JSON
            const fallbackMessage = `
                <p>Xin l·ªói, kh√¥ng th·ªÉ t·∫£i tin nh·∫Øn. H√£y th·ª≠ l·∫°i sau!</p>
            `;
            document.getElementById("message").innerHTML = fallbackMessage;
        });
}

// ========== KH·ªûI CH·∫†Y ==========
window.addEventListener("DOMContentLoaded", () => {
    loadImages();
    setTimeout(createMessage, 1500); // Delay ƒë·ªÉ load ·∫£nh n·ªÅn tr∆∞·ªõc
});
    